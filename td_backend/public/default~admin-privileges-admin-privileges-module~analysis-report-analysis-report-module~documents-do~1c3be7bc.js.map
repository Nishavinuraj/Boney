{"version":3,"sources":["webpack:///./node_modules/ng2-auto-complete/dist/index.js","webpack:///./node_modules/ng2-auto-complete/dist/ng2-auto-complete.component.js","webpack:///./node_modules/ng2-auto-complete/dist/ng2-auto-complete.directive.js","webpack:///./node_modules/ng2-auto-complete/dist/ng2-auto-complete.js","webpack:///./node_modules/ng2-auto-complete/dist/ng2-auto-complete.module.js"],"names":[],"mappings":";;;;;;;;;;AAAa;AACb,0BAA0B,mBAAO,CAAC,uFAAqB;AACvD;AACA,iCAAiC,mBAAO,CAAC,qGAA4B;AACrE;AACA,oCAAoC,mBAAO,CAAC,2GAA+B;AAC3E;AACA,oCAAoC,mBAAO,CAAC,2GAA+B;AAC3E;AACA,iC;;;;;;;;;;;;ACTa;AACb,aAAa,mBAAO,CAAC,iEAAe;AACpC,0BAA0B,mBAAO,CAAC,uFAAqB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,kCAAkC,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,UAAU,YAAY,EAAE;AAChE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,mCAAmC,EAAE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB,aAAa,EAAE,eAAe,gCAAgC,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB,aAAa,EAAE,eAAe,gCAAgC,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS;AACT;AACA,mNAAmN,aAAa,4YAA4Y,aAAa,kKAAkK,uCAAuC,6IAA6I,iBAAiB,6EAA6E,kFAAkF,0BAA0B;AACzpC;AACA,wDAAwD,UAAU,sCAAsC,OAAO,YAAY,mCAAmC,OAAO,KAAK,wBAAwB,oCAAoC,KAAK,gCAAgC,oBAAoB,gBAAgB,mBAAmB,8BAA8B,mCAAmC,KAAK,+BAA+B,6BAA6B,gBAAgB,mBAAmB,uBAAuB,4BAA4B,iBAAiB,6BAA6B,6BAA6B,gCAAgC,KAAK,mCAAmC,oBAAoB,KAAK,kCAAkC,uBAAuB,oCAAoC,KAAK,2CAA2C,6BAA6B,KAAK,6CAA6C,0BAA0B,KAAK,wCAAwC,6BAA6B,KAAK;AAC3gC;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA;AACA,SAAS,2BAA2B;AACpC,SAAS,6CAA6C;AACtD;AACA;AACA,2BAA2B,gDAAgD;AAC3E,oBAAoB,wCAAwC;AAC5D,wBAAwB,8CAA8C;AACtE,sBAAsB,2CAA2C;AACjE,yBAAyB,6CAA6C;AACtE,6BAA6B,mDAAmD;AAChF,8BAA8B,qDAAqD;AACnF,6BAA6B,mDAAmD;AAChF,yBAAyB,8CAA8C;AACvE,wBAAwB,8CAA8C;AACtE,0BAA0B,gDAAgD;AAC1E,gCAAgC,uDAAuD;AACvF,yBAAyB,+CAA+C;AACxE,4BAA4B,iDAAiD;AAC7E,2BAA2B,sBAAsB;AACjD,+BAA+B,uDAAuD;AACtF;AACA;AACA,CAAC;AACD;AACA,uD;;;;;;;;;;;;AClMa;AACb,aAAa,mBAAO,CAAC,iEAAe;AACpC,oCAAoC,mBAAO,CAAC,2GAA+B;AAC3E,cAAc,mBAAO,CAAC,oEAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbzG,4DAA4D,0CAA0C,EAAE;AACxG,+DAA+D,qCAAqC,EAAE;AACtG,6DAA6D,mCAAmC,EAAE;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB,IAAI;AACrB;AACA;AACA;AACA,SAAS,yCAAyC;AAClD,SAAS,yBAAyB;AAClC,SAAS,iCAAiC;AAC1C,SAAS,+CAA+C,wBAAwB,GAAG,oBAAoB,GAAG,wBAAwB,IAAI;AACtI;AACA;AACA,qCAAqC,2DAA2D;AAChG,oBAAoB,wCAAwC;AAC5D,wBAAwB,8CAA8C;AACtE,sBAAsB,2CAA2C;AACjE,iCAAiC,uDAAuD;AACxF,6BAA6B,mDAAmD;AAChF,wBAAwB,8CAA8C;AACtE,2BAA2B,iDAAiD;AAC5E,2BAA2B,gDAAgD;AAC3E,yBAAyB,8CAA8C;AACvE,6BAA6B,mDAAmD;AAChF,8BAA8B,qDAAqD;AACnF,4BAA4B,iDAAiD;AAC7E,yBAAyB,+CAA+C;AACxE,4BAA4B,iDAAiD;AAC7E,qBAAqB,qBAAqB;AAC1C,6BAA6B,iDAAiD;AAC9E,4BAA4B,6CAA6C;AACzE,2BAA2B,sBAAsB;AACjD,0BAA0B,sBAAsB;AAChD;AACA;AACA,CAAC;AACD;AACA,uD;;;;;;;;;;;;ACpPa;AACb,aAAa,mBAAO,CAAC,iEAAe;AACpC,aAAa,mBAAO,CAAC,iEAAe;AACpC,mBAAO,CAAC,mFAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB,EAAE;AACxD;AACA;AACA;AACA;AACA,+CAA+C,0BAA0B,EAAE;AAC3E;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS,0BAA0B;AACnC;AACA;AACA;AACA,SAAS,kCAAkC,wBAAwB,IAAI;AACvE;AACA;AACA,CAAC;AACD;AACA,6C;;;;;;;;;;;;AChFa;AACb,aAAa,mBAAO,CAAC,iEAAe;AACpC,eAAe,mBAAO,CAAC,uEAAiB;AACxC,cAAc,mBAAO,CAAC,oEAAgB;AACtC,oCAAoC,mBAAO,CAAC,2GAA+B;AAC3E,oCAAoC,mBAAO,CAAC,2GAA+B;AAC3E,0BAA0B,mBAAO,CAAC,uFAAqB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,oD","file":"default~admin-privileges-admin-privileges-module~analysis-report-analysis-report-module~documents-do~1c3be7bc.js","sourcesContent":["\"use strict\";\nvar ng2_auto_complete_1 = require(\"./ng2-auto-complete\");\nexports.Ng2AutoComplete = ng2_auto_complete_1.Ng2AutoComplete;\nvar ng2_auto_complete_module_1 = require(\"./ng2-auto-complete.module\");\nexports.Ng2AutoCompleteModule = ng2_auto_complete_module_1.Ng2AutoCompleteModule;\nvar ng2_auto_complete_component_1 = require(\"./ng2-auto-complete.component\");\nexports.Ng2AutoCompleteComponent = ng2_auto_complete_component_1.Ng2AutoCompleteComponent;\nvar ng2_auto_complete_directive_1 = require(\"./ng2-auto-complete.directive\");\nexports.Ng2AutoCompleteDirective = ng2_auto_complete_directive_1.Ng2AutoCompleteDirective;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar core_1 = require(\"@angular/core\");\nvar ng2_auto_complete_1 = require(\"./ng2-auto-complete\");\n/**\n * show a selected date in monthly calendar\n * Each filteredList item has the following property in addition to data itself\n *   1. displayValue as string e.g. Allen Kim\n *   2. dataValue as any e.g.\n */\nvar Ng2AutoCompleteComponent = (function () {\n    /**\n     * constructor\n     */\n    function Ng2AutoCompleteComponent(elementRef, autoComplete) {\n        var _this = this;\n        this.autoComplete = autoComplete;\n        this.minChars = 0;\n        this.loadingText = \"Loading\";\n        this.showInputTag = true;\n        this.showDropdownOnInit = false;\n        this.tabToSelect = true;\n        this.matchFormatted = false;\n        this.valueSelected = new core_1.EventEmitter();\n        this.dropdownVisible = false;\n        this.isLoading = false;\n        this.filteredList = [];\n        this.minCharsEntered = false;\n        this.itemIndex = 0;\n        this.reloadListInDelay = function (evt) {\n            var delayMs = _this.isSrcArr() ? 10 : 500;\n            var keyword = evt.target.value;\n            // executing after user stopped typing\n            _this.delay(function () { return _this.reloadList(keyword); }, delayMs);\n        };\n        this.inputElKeyHandler = function (evt) {\n            var totalNumItem = _this.filteredList.length;\n            switch (evt.keyCode) {\n                case 27:\n                    break;\n                case 38:\n                    _this.itemIndex = (totalNumItem + _this.itemIndex - 1) % totalNumItem;\n                    break;\n                case 40:\n                    _this.dropdownVisible = true;\n                    _this.itemIndex = (totalNumItem + _this.itemIndex + 1) % totalNumItem;\n                    break;\n                case 13:\n                    if (_this.filteredList.length > 0) {\n                        _this.selectOne(_this.filteredList[_this.itemIndex]);\n                    }\n                    evt.preventDefault();\n                    break;\n                case 9:\n                    if (_this.tabToSelect && _this.filteredList.length > 0) {\n                        _this.selectOne(_this.filteredList[_this.itemIndex]);\n                    }\n                    break;\n            }\n        };\n        this.delay = (function () {\n            var timer = 0;\n            return function (callback, ms) {\n                clearTimeout(timer);\n                timer = setTimeout(callback, ms);\n            };\n        })();\n        this.el = elementRef.nativeElement;\n    }\n    Ng2AutoCompleteComponent.prototype.isSrcArr = function () {\n        return (this.source.constructor.name === \"Array\");\n    };\n    /**\n     * user enters into input el, shows list to select, then select one\n     */\n    Ng2AutoCompleteComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.autoComplete.source = this.source;\n        this.autoComplete.pathToData = this.pathToData;\n        this.autoComplete.listFormatter = this.listFormatter;\n        setTimeout(function () {\n            if (_this.autoCompleteInput) {\n                _this.autoCompleteInput.nativeElement.focus();\n            }\n            if (_this.showDropdownOnInit) {\n                _this.showDropdownList({ target: { value: '' } });\n            }\n        });\n    };\n    Ng2AutoCompleteComponent.prototype.showDropdownList = function (event) {\n        this.dropdownVisible = true;\n        this.reloadList(event.target.value);\n    };\n    Ng2AutoCompleteComponent.prototype.hideDropdownList = function () {\n        this.dropdownVisible = false;\n    };\n    Ng2AutoCompleteComponent.prototype.findItemFromSelectValue = function (selectText) {\n        var matchingItems = this.filteredList\n            .filter(function (item) { return ('' + item) === selectText; });\n        return matchingItems.length ? matchingItems[0] : null;\n    };\n    Ng2AutoCompleteComponent.prototype.reloadList = function (keyword) {\n        var _this = this;\n        this.filteredList = [];\n        if (keyword.length < (this.minChars || 0)) {\n            this.minCharsEntered = false;\n            return;\n        }\n        else {\n            this.minCharsEntered = true;\n        }\n        if (this.isSrcArr()) {\n            this.isLoading = false;\n            this.filteredList = this.autoComplete.filter(this.source, keyword, this.matchFormatted);\n            if (this.maxNumList) {\n                this.filteredList = this.filteredList.slice(0, this.maxNumList);\n            }\n        }\n        else {\n            this.isLoading = true;\n            if (typeof this.source === \"function\") {\n                // custom function that returns observable\n                this.source(keyword).subscribe(function (resp) {\n                    if (_this.pathToData) {\n                        var paths = _this.pathToData.split(\".\");\n                        paths.forEach(function (prop) { return resp = resp[prop]; });\n                    }\n                    _this.filteredList = resp;\n                    if (_this.maxNumList) {\n                        _this.filteredList = _this.filteredList.slice(0, _this.maxNumList);\n                    }\n                }, function (error) { return null; }, function () { return _this.isLoading = false; } // complete\n                );\n            }\n            else {\n                // remote source\n                this.autoComplete.getRemoteData(keyword).subscribe(function (resp) {\n                    _this.filteredList = resp;\n                    if (_this.maxNumList) {\n                        _this.filteredList = _this.filteredList.slice(0, _this.maxNumList);\n                    }\n                }, function (error) { return null; }, function () { return _this.isLoading = false; } // complete\n                );\n            }\n        }\n    };\n    Ng2AutoCompleteComponent.prototype.selectOne = function (data) {\n        this.valueSelected.emit(data);\n    };\n    ;\n    Object.defineProperty(Ng2AutoCompleteComponent.prototype, \"emptyList\", {\n        get: function () {\n            return !(this.isLoading ||\n                (this.minCharsEntered && !this.isLoading && !this.filteredList.length) ||\n                (this.filteredList.length));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Ng2AutoCompleteComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: \"ng2-auto-complete\",\n                    template: \"\\n  <div class=\\\"ng2-auto-complete\\\">\\n\\n    <!-- keyword input -->\\n    <input *ngIf=\\\"showInputTag\\\"\\n           #autoCompleteInput class=\\\"keyword\\\"\\n           placeholder=\\\"{{placeholder}}\\\"\\n           (focus)=\\\"showDropdownList($event)\\\"\\n           (blur)=\\\"hideDropdownList()\\\"\\n           (keydown)=\\\"inputElKeyHandler($event)\\\"\\n           (input)=\\\"reloadListInDelay($event)\\\"\\n           [(ngModel)]=\\\"keyword\\\" />\\n\\n    <!-- dropdown that user can select -->\\n    <ul *ngIf=\\\"dropdownVisible\\\" [class.empty]=\\\"emptyList\\\">\\n      <li *ngIf=\\\"isLoading\\\" class=\\\"loading\\\">{{loadingText}}</li>\\n      <li *ngIf=\\\"minCharsEntered && !isLoading && !filteredList.length\\\"\\n           (mousedown)=\\\"selectOne('')\\\"\\n           class=\\\"no-match-found\\\">{{noMatchFoundText || 'No Result Found'}}</li>\\n      <li *ngIf=\\\"blankOptionText && filteredList.length\\\"\\n          (mousedown)=\\\"selectOne('')\\\"\\n          class=\\\"blank-item\\\">{{blankOptionText}}</li>\\n      <li class=\\\"item\\\"\\n          *ngFor=\\\"let item of filteredList; let i=index\\\"\\n          (mousedown)=\\\"selectOne(item)\\\"\\n          [ngClass]=\\\"{selected: i === itemIndex}\\\"\\n          [innerHtml]=\\\"autoComplete.getFormattedListItem(item)\\\">\\n      </li>\\n    </ul>\\n\\n  </div>\",\n                    providers: [ng2_auto_complete_1.Ng2AutoComplete],\n                    styles: [\"\\n  @keyframes slideDown {\\n    0% {\\n      transform:  translateY(-10px);\\n    }\\n    100% {\\n      transform: translateY(0px);\\n    }\\n  }\\n  .ng2-auto-complete {\\n    background-color: transparent;\\n  }\\n  .ng2-auto-complete > input {\\n    outline: none;\\n    border: 0;\\n    padding: 2px; \\n    box-sizing: border-box;\\n    background-clip: content-box;\\n  }\\n\\n  .ng2-auto-complete > ul {\\n    background-color: #fff;\\n    margin: 0;\\n    width : 100%;\\n    overflow-y: auto;\\n    list-style-type: none;\\n    padding: 0;\\n    border: 1px solid #ccc;\\n    box-sizing: border-box;\\n    animation: slideDown 0.1s;\\n  }\\n  .ng2-auto-complete > ul.empty {\\n    display: none;\\n  }\\n\\n  .ng2-auto-complete > ul li {\\n    padding: 2px 5px;\\n    border-bottom: 1px solid #eee;\\n  }\\n\\n  .ng2-auto-complete > ul li.selected {\\n    background-color: #ccc;\\n  }\\n\\n  .ng2-auto-complete > ul li:last-child {\\n    border-bottom: none;\\n  }\\n\\n  .ng2-auto-complete > ul li:hover {\\n    background-color: #ccc;\\n  }\"\n                    ],\n                    encapsulation: core_1.ViewEncapsulation.None\n                },] },\n    ];\n    /** @nocollapse */\n    Ng2AutoCompleteComponent.ctorParameters = [\n        { type: core_1.ElementRef, },\n        { type: ng2_auto_complete_1.Ng2AutoComplete, },\n    ];\n    Ng2AutoCompleteComponent.propDecorators = {\n        'listFormatter': [{ type: core_1.Input, args: [\"list-formatter\",] },],\n        'source': [{ type: core_1.Input, args: [\"source\",] },],\n        'pathToData': [{ type: core_1.Input, args: [\"path-to-data\",] },],\n        'minChars': [{ type: core_1.Input, args: [\"min-chars\",] },],\n        'placeholder': [{ type: core_1.Input, args: [\"placeholder\",] },],\n        'blankOptionText': [{ type: core_1.Input, args: [\"blank-option-text\",] },],\n        'noMatchFoundText': [{ type: core_1.Input, args: [\"no-match-found-text\",] },],\n        'acceptUserInput': [{ type: core_1.Input, args: [\"accept-user-input\",] },],\n        'loadingText': [{ type: core_1.Input, args: [\"loading-text\",] },],\n        'maxNumList': [{ type: core_1.Input, args: [\"max-num-list\",] },],\n        'showInputTag': [{ type: core_1.Input, args: [\"show-input-tag\",] },],\n        'showDropdownOnInit': [{ type: core_1.Input, args: [\"show-dropdown-on-init\",] },],\n        'tabToSelect': [{ type: core_1.Input, args: [\"tab-to-select\",] },],\n        'matchFormatted': [{ type: core_1.Input, args: [\"match-formatted\",] },],\n        'valueSelected': [{ type: core_1.Output },],\n        'autoCompleteInput': [{ type: core_1.ViewChild, args: ['autoCompleteInput',] },],\n    };\n    return Ng2AutoCompleteComponent;\n}());\nexports.Ng2AutoCompleteComponent = Ng2AutoCompleteComponent;\n//# sourceMappingURL=ng2-auto-complete.component.js.map","\"use strict\";\nvar core_1 = require(\"@angular/core\");\nvar ng2_auto_complete_component_1 = require(\"./ng2-auto-complete.component\");\nvar forms_1 = require(\"@angular/forms\");\n/**\n * display auto-complete section with input and dropdown list when it is clicked\n */\nvar Ng2AutoCompleteDirective = (function () {\n    function Ng2AutoCompleteDirective(resolver, renderer, viewContainerRef, parentForm) {\n        var _this = this;\n        this.resolver = resolver;\n        this.renderer = renderer;\n        this.viewContainerRef = viewContainerRef;\n        this.parentForm = parentForm;\n        this.loadingText = \"Loading\";\n        this.tabToSelect = true;\n        this.matchFormatted = false;\n        this.ngModelChange = new core_1.EventEmitter();\n        this.valueChanged = new core_1.EventEmitter();\n        //show auto-complete list below the current element\n        this.showAutoCompleteDropdown = function (event) {\n            var factory = _this.resolver.resolveComponentFactory(ng2_auto_complete_component_1.Ng2AutoCompleteComponent);\n            _this.componentRef = _this.viewContainerRef.createComponent(factory);\n            var component = _this.componentRef.instance;\n            component.showInputTag = false; //Do NOT display autocomplete input tag separately\n            component.pathToData = _this.pathToData;\n            component.minChars = _this.minChars;\n            component.source = _this.source;\n            component.placeholder = _this.autoCompletePlaceholder;\n            component.acceptUserInput = _this.acceptUserInput;\n            component.maxNumList = parseInt(_this.maxNumList, 10);\n            component.loadingText = _this.loadingText;\n            component.listFormatter = _this.listFormatter;\n            component.blankOptionText = _this.blankOptionText;\n            component.noMatchFoundText = _this.noMatchFoundText;\n            component.tabToSelect = _this.tabToSelect;\n            component.matchFormatted = _this.matchFormatted;\n            component.valueSelected.subscribe(_this.selectNewValue);\n            _this.acDropdownEl = _this.componentRef.location.nativeElement;\n            _this.acDropdownEl.style.display = \"none\";\n            // if this element is not an input tag, move dropdown after input tag\n            // so that it displays correctly\n            if (_this.el.tagName !== \"INPUT\" && _this.acDropdownEl) {\n                _this.inputEl.parentElement.insertBefore(_this.acDropdownEl, _this.inputEl.nextSibling);\n            }\n            _this.revertValue = typeof _this.ngModel !== \"undefined\" ? _this.ngModel : _this.inputEl.value;\n            setTimeout(function () {\n                component.reloadList(_this.inputEl.value);\n                _this.styleAutoCompleteDropdown();\n                component.dropdownVisible = true;\n            });\n        };\n        this.hideAutoCompleteDropdown = function (event) {\n            if (_this.componentRef) {\n                var currentItem = void 0;\n                var hasRevertValue = (typeof _this.revertValue !== \"undefined\");\n                if (_this.inputEl && hasRevertValue && _this.acceptUserInput === false) {\n                    currentItem = _this.componentRef.instance.findItemFromSelectValue(_this.inputEl.value);\n                }\n                _this.componentRef.destroy();\n                _this.componentRef = undefined;\n                if (_this.inputEl &&\n                    hasRevertValue &&\n                    _this.acceptUserInput === false &&\n                    currentItem === null) {\n                    _this.selectNewValue(_this.revertValue);\n                }\n            }\n        };\n        this.styleAutoCompleteDropdown = function () {\n            if (_this.componentRef) {\n                var component = _this.componentRef.instance;\n                /* setting width/height auto complete */\n                var thisElBCR = _this.el.getBoundingClientRect();\n                var thisInputElBCR = _this.inputEl.getBoundingClientRect();\n                var closeToBottom = thisInputElBCR.bottom + 100 > window.innerHeight;\n                _this.acDropdownEl.style.width = thisInputElBCR.width + \"px\";\n                _this.acDropdownEl.style.position = \"absolute\";\n                _this.acDropdownEl.style.zIndex = \"1\";\n                _this.acDropdownEl.style.left = \"0\";\n                _this.acDropdownEl.style.display = \"inline-block\";\n                if (closeToBottom) {\n                    _this.acDropdownEl.style.bottom = thisInputElBCR.height + \"px\";\n                }\n                else {\n                    _this.acDropdownEl.style.top = thisInputElBCR.height + \"px\";\n                }\n            }\n        };\n        this.selectNewValue = function (item) {\n            // make displayable value\n            if (item && typeof item === \"object\") {\n                item = _this.setToStringFunction(item);\n            }\n            _this.inputEl && (_this.inputEl.value = '' + item);\n            // make return value\n            var val = item;\n            if (_this.selectValueOf && item[_this.selectValueOf]) {\n                val = item[_this.selectValueOf];\n            }\n            if ((_this.parentForm && _this.formControlName) || _this.extFormControl) {\n                if (!!val) {\n                    _this.formControl.patchValue(val);\n                }\n            }\n            (val !== _this.ngModel) && _this.ngModelChange.emit(val);\n            _this.valueChanged.emit(val);\n            _this.hideAutoCompleteDropdown();\n        };\n        this.keydownEventHandler = function (evt) {\n            if (_this.componentRef) {\n                var component = _this.componentRef.instance;\n                component.inputElKeyHandler(evt);\n            }\n        };\n        this.inputEventHandler = function (evt) {\n            if (_this.componentRef) {\n                var component = _this.componentRef.instance;\n                component.dropdownVisible = true;\n                component.reloadListInDelay(evt);\n            }\n            else {\n                _this.showAutoCompleteDropdown();\n            }\n        };\n        this.el = this.viewContainerRef.element.nativeElement;\n    }\n    Ng2AutoCompleteDirective.prototype.ngOnInit = function () {\n        // wrap this element with <div class=\"ng2-auto-complete\">\n        this.wrapperEl = document.createElement(\"div\");\n        this.wrapperEl.className = \"ng2-auto-complete-wrapper\";\n        this.wrapperEl.style.position = \"relative\";\n        this.el.parentElement.insertBefore(this.wrapperEl, this.el.nextSibling);\n        this.wrapperEl.appendChild(this.el);\n        //Check if we were supplied with a [formControlName] and it is inside a [form]\n        //else check if we are supplied with a [FormControl] regardless if it is inside a [form] tag\n        if (this.parentForm && this.formControlName) {\n            if (this.parentForm['form']) {\n                this.formControl = this.parentForm['form'].get(this.formControlName);\n            }\n            else if (this.parentForm instanceof forms_1.FormGroupName) {\n                this.formControl = this.parentForm.control.controls[this.formControlName];\n            }\n        }\n        else if (this.extFormControl) {\n            this.formControl = this.extFormControl;\n        }\n        // apply toString() method for the object\n        if (!!this.ngModel) {\n            this.selectNewValue(this.ngModel);\n        }\n        else if (!!this.formControl && this.formControl.value) {\n            this.selectNewValue(this.formControl.value[this.displayPropertyName]);\n        }\n    };\n    Ng2AutoCompleteDirective.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        // if this element is not an input tag, move dropdown after input tag\n        // so that it displays correctly\n        this.inputEl = this.el.tagName === \"INPUT\" ?\n            this.el : this.el.querySelector(\"input\");\n        this.inputEl.addEventListener('focus', function (e) { return _this.showAutoCompleteDropdown(e); });\n        this.inputEl.addEventListener('blur', function (e) { return _this.hideAutoCompleteDropdown(e); });\n        this.inputEl.addEventListener('keydown', function (e) { return _this.keydownEventHandler(e); });\n        this.inputEl.addEventListener('input', function (e) { return _this.inputEventHandler(e); });\n    };\n    Ng2AutoCompleteDirective.prototype.ngOnDestroy = function () {\n        if (this.componentRef) {\n            this.componentRef.instance.valueSelected.unsubscribe();\n        }\n    };\n    Ng2AutoCompleteDirective.prototype.ngOnChanges = function (changes) {\n        if (changes['ngModel']) {\n            this.ngModel = this.setToStringFunction(changes['ngModel'].currentValue);\n        }\n    };\n    Ng2AutoCompleteDirective.prototype.setToStringFunction = function (item) {\n        if (item && typeof item === \"object\") {\n            var displayVal_1;\n            if (typeof this.valueFormatter === 'string') {\n                var matches = this.valueFormatter.match(/[a-zA-Z0-9_\\$]+/g);\n                var formatted_1 = this.valueFormatter;\n                if (matches && typeof item !== 'string') {\n                    matches.forEach(function (key) {\n                        formatted_1 = formatted_1.replace(key, item[key]);\n                    });\n                }\n                displayVal_1 = formatted_1;\n            }\n            else if (typeof this.valueFormatter === 'function') {\n                displayVal_1 = this.valueFormatter(item);\n            }\n            else if (this.displayPropertyName) {\n                displayVal_1 = item[this.displayPropertyName];\n            }\n            else if (typeof this.listFormatter === 'string' && this.listFormatter.match(/^\\w+$/)) {\n                displayVal_1 = item[this.listFormatter];\n            }\n            else {\n                displayVal_1 = item.value;\n            }\n            item.toString = function () {\n                return displayVal_1;\n            };\n        }\n        return item;\n    };\n    Ng2AutoCompleteDirective.decorators = [\n        { type: core_1.Directive, args: [{\n                    selector: \"[auto-complete], [ng2-auto-complete]\"\n                },] },\n    ];\n    /** @nocollapse */\n    Ng2AutoCompleteDirective.ctorParameters = [\n        { type: core_1.ComponentFactoryResolver, },\n        { type: core_1.Renderer, },\n        { type: core_1.ViewContainerRef, },\n        { type: forms_1.ControlContainer, decorators: [{ type: core_1.Optional }, { type: core_1.Host }, { type: core_1.SkipSelf },] },\n    ];\n    Ng2AutoCompleteDirective.propDecorators = {\n        'autoCompletePlaceholder': [{ type: core_1.Input, args: [\"auto-complete-placeholder\",] },],\n        'source': [{ type: core_1.Input, args: [\"source\",] },],\n        'pathToData': [{ type: core_1.Input, args: [\"path-to-data\",] },],\n        'minChars': [{ type: core_1.Input, args: [\"min-chars\",] },],\n        'displayPropertyName': [{ type: core_1.Input, args: [\"display-property-name\",] },],\n        'acceptUserInput': [{ type: core_1.Input, args: [\"accept-user-input\",] },],\n        'maxNumList': [{ type: core_1.Input, args: [\"max-num-list\",] },],\n        'selectValueOf': [{ type: core_1.Input, args: [\"select-value-of\",] },],\n        'listFormatter': [{ type: core_1.Input, args: [\"list-formatter\",] },],\n        'loadingText': [{ type: core_1.Input, args: [\"loading-text\",] },],\n        'blankOptionText': [{ type: core_1.Input, args: [\"blank-option-text\",] },],\n        'noMatchFoundText': [{ type: core_1.Input, args: [\"no-match-found-text\",] },],\n        'valueFormatter': [{ type: core_1.Input, args: [\"value-formatter\",] },],\n        'tabToSelect': [{ type: core_1.Input, args: [\"tab-to-select\",] },],\n        'matchFormatted': [{ type: core_1.Input, args: [\"match-formatted\",] },],\n        'ngModel': [{ type: core_1.Input },],\n        'formControlName': [{ type: core_1.Input, args: ['formControlName',] },],\n        'extFormControl': [{ type: core_1.Input, args: ['formControl',] },],\n        'ngModelChange': [{ type: core_1.Output },],\n        'valueChanged': [{ type: core_1.Output },],\n    };\n    return Ng2AutoCompleteDirective;\n}());\nexports.Ng2AutoCompleteDirective = Ng2AutoCompleteDirective;\n//# sourceMappingURL=ng2-auto-complete.directive.js.map","\"use strict\";\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/http\");\nrequire(\"rxjs/add/operator/map\");\n/**\n * provides auto-complete related utility functions\n */\nvar Ng2AutoComplete = (function () {\n    function Ng2AutoComplete(http) {\n        this.http = http;\n        // ...\n    }\n    Ng2AutoComplete.prototype.filter = function (list, keyword, matchFormatted) {\n        var _this = this;\n        return list.filter(function (el) {\n            var objStr = matchFormatted ? _this.getFormattedListItem(el).toLowerCase() : JSON.stringify(el).toLowerCase();\n            keyword = keyword.toLowerCase();\n            //console.log(objStr, keyword, objStr.indexOf(keyword) !== -1);\n            return objStr.indexOf(keyword) !== -1;\n        });\n    };\n    Ng2AutoComplete.prototype.getFormattedListItem = function (data) {\n        var formatted;\n        var formatter = this.listFormatter || '(id) value';\n        if (typeof formatter === 'function') {\n            formatted = formatter.apply(this, [data]);\n        }\n        else if (typeof data !== 'object') {\n            formatted = data;\n        }\n        else if (typeof formatter === 'string') {\n            formatted = formatter;\n            var matches = formatter.match(/[a-zA-Z0-9_\\$]+/g);\n            if (matches && typeof data !== 'string') {\n                matches.forEach(function (key) {\n                    formatted = formatted.replace(key, data[key]);\n                });\n            }\n        }\n        return formatted;\n    };\n    /**\n     * return remote data from the given source and options, and data path\n     */\n    Ng2AutoComplete.prototype.getRemoteData = function (keyword) {\n        var _this = this;\n        if (typeof this.source !== 'string') {\n            throw \"Invalid type of source, must be a string. e.g. http://www.google.com?q=:my_keyword\";\n        }\n        else if (!this.http) {\n            throw \"Http is required.\";\n        }\n        var matches = this.source.match(/:[a-zA-Z_]+/);\n        if (matches === null) {\n            throw \"Replacement word is missing.\";\n        }\n        var replacementWord = matches[0];\n        var url = this.source.replace(replacementWord, keyword);\n        return this.http.get(url)\n            .map(function (resp) { return resp.json(); })\n            .map(function (resp) {\n            var list = resp.data || resp;\n            if (_this.pathToData) {\n                var paths = _this.pathToData.split(\".\");\n                paths.forEach(function (prop) { return list = list[prop]; });\n            }\n            return list;\n        });\n    };\n    ;\n    Ng2AutoComplete.decorators = [\n        { type: core_1.Injectable },\n    ];\n    /** @nocollapse */\n    Ng2AutoComplete.ctorParameters = [\n        { type: http_1.Http, decorators: [{ type: core_1.Optional },] },\n    ];\n    return Ng2AutoComplete;\n}());\nexports.Ng2AutoComplete = Ng2AutoComplete;\n//# sourceMappingURL=ng2-auto-complete.js.map","\"use strict\";\nvar core_1 = require('@angular/core');\nvar common_1 = require('@angular/common');\nvar forms_1 = require('@angular/forms');\nvar ng2_auto_complete_component_1 = require('./ng2-auto-complete.component');\nvar ng2_auto_complete_directive_1 = require('./ng2-auto-complete.directive');\nvar ng2_auto_complete_1 = require('./ng2-auto-complete');\nvar Ng2AutoCompleteModule = (function () {\n    function Ng2AutoCompleteModule() {\n    }\n    Ng2AutoCompleteModule.forRoot = function () {\n        return {\n            ngModule: Ng2AutoCompleteModule,\n            providers: [ng2_auto_complete_1.Ng2AutoComplete]\n        };\n    };\n    Ng2AutoCompleteModule.decorators = [\n        { type: core_1.NgModule, args: [{\n                    imports: [common_1.CommonModule, forms_1.FormsModule],\n                    declarations: [ng2_auto_complete_component_1.Ng2AutoCompleteComponent, ng2_auto_complete_directive_1.Ng2AutoCompleteDirective],\n                    exports: [ng2_auto_complete_component_1.Ng2AutoCompleteComponent, ng2_auto_complete_directive_1.Ng2AutoCompleteDirective],\n                    entryComponents: [ng2_auto_complete_component_1.Ng2AutoCompleteComponent]\n                },] },\n    ];\n    /** @nocollapse */\n    Ng2AutoCompleteModule.ctorParameters = [];\n    return Ng2AutoCompleteModule;\n}());\nexports.Ng2AutoCompleteModule = Ng2AutoCompleteModule;\n//# sourceMappingURL=ng2-auto-complete.module.js.map"],"sourceRoot":""}